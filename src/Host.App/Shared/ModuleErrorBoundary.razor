@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@inject ILogger<ModuleErrorBoundary> Logger
@inject IMicroFrontendEventBus EventBus

@if (hasError)
{
    <div class="module-error">
        <h4>‚ö†Ô∏è Module Error</h4>
        <p><strong>Module:</strong> @ModuleName</p>
        <p><strong>Error:</strong> @errorMessage</p>
        <button class="btn btn-secondary" @onclick="RetryOperation">
            üîÑ Retry
        </button>
        <button class="btn btn-secondary" @onclick="ClearError">
            ‚úñÔ∏è Dismiss
        </button>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string ModuleName { get; set; } = "Unknown";

    private bool hasError = false;
    private string errorMessage = string.Empty;
    private Exception? lastException;

    protected override void OnParametersSet()
    {
        // Reset error state when parameters change
        hasError = false;
        errorMessage = string.Empty;
        lastException = null;
    }

    public void ProcessErrorFromException(Exception exception)
    {
        hasError = true;
        errorMessage = exception.Message;
        lastException = exception;

        Logger.LogError(exception, "Error in module {ModuleName}", ModuleName);

        // Notify other modules of the failure
        _ = Task.Run(async () =>
        {            await EventBus.PublishAsync("module.error", new ModuleErrorEvent
            {
                ModuleName = ModuleName,
                ErrorMessage = exception.Message,
                StackTrace = exception.StackTrace,
                ErrorType = exception.GetType().Name
            });
        });

        StateHasChanged();
    }

    private void RetryOperation()
    {
        hasError = false;
        errorMessage = string.Empty;
        lastException = null;
        StateHasChanged();
    }

    private void ClearError()
    {
        hasError = false;
        errorMessage = string.Empty;
        lastException = null;
        StateHasChanged();
    }
}
